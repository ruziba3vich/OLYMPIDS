// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: athlete-service/athlete.proto

package athlete

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AthleteServiceClient is the client API for AthleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AthleteServiceClient interface {
	CreateAthlete(ctx context.Context, in *CreateAthleteRequest, opts ...grpc.CallOption) (*Athlete, error)
	GetAthlete(ctx context.Context, in *GetAthleteRequest, opts ...grpc.CallOption) (*Athlete, error)
	UpdateAthlete(ctx context.Context, in *UpdateAthleteRequest, opts ...grpc.CallOption) (*Athlete, error)
	DeleteAthlete(ctx context.Context, in *DeleteAthleteRequest, opts ...grpc.CallOption) (*Athlete, error)
	GetAthleteBySport(ctx context.Context, in *GetAthleteBySportRequest, opts ...grpc.CallOption) (*GetAthleteResponse, error)
}

type athleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAthleteServiceClient(cc grpc.ClientConnInterface) AthleteServiceClient {
	return &athleteServiceClient{cc}
}

func (c *athleteServiceClient) CreateAthlete(ctx context.Context, in *CreateAthleteRequest, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/athlete.AthleteService/CreateAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) GetAthlete(ctx context.Context, in *GetAthleteRequest, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/athlete.AthleteService/GetAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) UpdateAthlete(ctx context.Context, in *UpdateAthleteRequest, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/athlete.AthleteService/UpdateAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) DeleteAthlete(ctx context.Context, in *DeleteAthleteRequest, opts ...grpc.CallOption) (*Athlete, error) {
	out := new(Athlete)
	err := c.cc.Invoke(ctx, "/athlete.AthleteService/DeleteAthlete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) GetAthleteBySport(ctx context.Context, in *GetAthleteBySportRequest, opts ...grpc.CallOption) (*GetAthleteResponse, error) {
	out := new(GetAthleteResponse)
	err := c.cc.Invoke(ctx, "/athlete.AthleteService/GetAthleteBySport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AthleteServiceServer is the server API for AthleteService service.
// All implementations must embed UnimplementedAthleteServiceServer
// for forward compatibility
type AthleteServiceServer interface {
	CreateAthlete(context.Context, *CreateAthleteRequest) (*Athlete, error)
	GetAthlete(context.Context, *GetAthleteRequest) (*Athlete, error)
	UpdateAthlete(context.Context, *UpdateAthleteRequest) (*Athlete, error)
	DeleteAthlete(context.Context, *DeleteAthleteRequest) (*Athlete, error)
	GetAthleteBySport(context.Context, *GetAthleteBySportRequest) (*GetAthleteResponse, error)
	mustEmbedUnimplementedAthleteServiceServer()
}

// UnimplementedAthleteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAthleteServiceServer struct {
}

func (UnimplementedAthleteServiceServer) CreateAthlete(context.Context, *CreateAthleteRequest) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAthlete not implemented")
}
func (UnimplementedAthleteServiceServer) GetAthlete(context.Context, *GetAthleteRequest) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAthlete not implemented")
}
func (UnimplementedAthleteServiceServer) UpdateAthlete(context.Context, *UpdateAthleteRequest) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAthlete not implemented")
}
func (UnimplementedAthleteServiceServer) DeleteAthlete(context.Context, *DeleteAthleteRequest) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAthlete not implemented")
}
func (UnimplementedAthleteServiceServer) GetAthleteBySport(context.Context, *GetAthleteBySportRequest) (*GetAthleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAthleteBySport not implemented")
}
func (UnimplementedAthleteServiceServer) mustEmbedUnimplementedAthleteServiceServer() {}

// UnsafeAthleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AthleteServiceServer will
// result in compilation errors.
type UnsafeAthleteServiceServer interface {
	mustEmbedUnimplementedAthleteServiceServer()
}

func RegisterAthleteServiceServer(s grpc.ServiceRegistrar, srv AthleteServiceServer) {
	s.RegisterService(&AthleteService_ServiceDesc, srv)
}

func _AthleteService_CreateAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAthleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).CreateAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete.AthleteService/CreateAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).CreateAthlete(ctx, req.(*CreateAthleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_GetAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAthleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).GetAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete.AthleteService/GetAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).GetAthlete(ctx, req.(*GetAthleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_UpdateAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAthleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).UpdateAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete.AthleteService/UpdateAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).UpdateAthlete(ctx, req.(*UpdateAthleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_DeleteAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAthleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).DeleteAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete.AthleteService/DeleteAthlete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).DeleteAthlete(ctx, req.(*DeleteAthleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_GetAthleteBySport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAthleteBySportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).GetAthleteBySport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/athlete.AthleteService/GetAthleteBySport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).GetAthleteBySport(ctx, req.(*GetAthleteBySportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AthleteService_ServiceDesc is the grpc.ServiceDesc for AthleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AthleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "athlete.AthleteService",
	HandlerType: (*AthleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAthlete",
			Handler:    _AthleteService_CreateAthlete_Handler,
		},
		{
			MethodName: "GetAthlete",
			Handler:    _AthleteService_GetAthlete_Handler,
		},
		{
			MethodName: "UpdateAthlete",
			Handler:    _AthleteService_UpdateAthlete_Handler,
		},
		{
			MethodName: "DeleteAthlete",
			Handler:    _AthleteService_DeleteAthlete_Handler,
		},
		{
			MethodName: "GetAthleteBySport",
			Handler:    _AthleteService_GetAthleteBySport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "athlete-service/athlete.proto",
}
