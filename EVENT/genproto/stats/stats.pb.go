// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: stat-service/stats.proto

package stats

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateTeamStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string            `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	TeamId  string            `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Card    *Card             `protobuf:"bytes,3,opt,name=card,proto3" json:"card,omitempty"`
	Score   *TeamScore        `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`
	Update  *TeamMemberUpdate `protobuf:"bytes,5,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *UpdateTeamStatsRequest) Reset() {
	*x = UpdateTeamStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTeamStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTeamStatsRequest) ProtoMessage() {}

func (x *UpdateTeamStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTeamStatsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTeamStatsRequest) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateTeamStatsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *UpdateTeamStatsRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *UpdateTeamStatsRequest) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *UpdateTeamStatsRequest) GetScore() *TeamScore {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *UpdateTeamStatsRequest) GetUpdate() *TeamMemberUpdate {
	if x != nil {
		return x.Update
	}
	return nil
}

type TechniqueLoseP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TechniqueLoseP) Reset() {
	*x = TechniqueLoseP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TechniqueLoseP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TechniqueLoseP) ProtoMessage() {}

func (x *TechniqueLoseP) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TechniqueLoseP.ProtoReflect.Descriptor instead.
func (*TechniqueLoseP) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{1}
}

func (x *TechniqueLoseP) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *TechniqueLoseP) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ScorePR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundNum   int32  `protobuf:"varint,1,opt,name=round_num,json=roundNum,proto3" json:"round_num,omitempty"`
	PlayerId   string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	ScoreCount int32  `protobuf:"varint,3,opt,name=score_count,json=scoreCount,proto3" json:"score_count,omitempty"`
}

func (x *ScorePR) Reset() {
	*x = ScorePR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScorePR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScorePR) ProtoMessage() {}

func (x *ScorePR) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScorePR.ProtoReflect.Descriptor instead.
func (*ScorePR) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{2}
}

func (x *ScorePR) GetRoundNum() int32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *ScorePR) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *ScorePR) GetScoreCount() int32 {
	if x != nil {
		return x.ScoreCount
	}
	return 0
}

type PlayerOnly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player1Id     string          `protobuf:"bytes,1,opt,name=player1_id,json=player1Id,proto3" json:"player1_id,omitempty"`
	Player2Id     string          `protobuf:"bytes,2,opt,name=player2_id,json=player2Id,proto3" json:"player2_id,omitempty"`
	Scores        []*ScorePR      `protobuf:"bytes,3,rep,name=scores,proto3" json:"scores,omitempty"`
	OveralScore1  int32           `protobuf:"varint,4,opt,name=overal_score1,json=overalScore1,proto3" json:"overal_score1,omitempty"`
	OveralScore2  int32           `protobuf:"varint,5,opt,name=overal_score2,json=overalScore2,proto3" json:"overal_score2,omitempty"`
	TechniqueLose *TechniqueLoseP `protobuf:"bytes,6,opt,name=technique_lose,json=techniqueLose,proto3" json:"technique_lose,omitempty"`
}

func (x *PlayerOnly) Reset() {
	*x = PlayerOnly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOnly) ProtoMessage() {}

func (x *PlayerOnly) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOnly.ProtoReflect.Descriptor instead.
func (*PlayerOnly) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerOnly) GetPlayer1Id() string {
	if x != nil {
		return x.Player1Id
	}
	return ""
}

func (x *PlayerOnly) GetPlayer2Id() string {
	if x != nil {
		return x.Player2Id
	}
	return ""
}

func (x *PlayerOnly) GetScores() []*ScorePR {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *PlayerOnly) GetOveralScore1() int32 {
	if x != nil {
		return x.OveralScore1
	}
	return 0
}

func (x *PlayerOnly) GetOveralScore2() int32 {
	if x != nil {
		return x.OveralScore2
	}
	return 0
}

func (x *PlayerOnly) GetTechniqueLose() *TechniqueLoseP {
	if x != nil {
		return x.TechniqueLose
	}
	return nil
}

type TeamMemberUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerInId  string                 `protobuf:"bytes,1,opt,name=player_in_id,json=playerInId,proto3" json:"player_in_id,omitempty"`
	PlayerOutId string                 `protobuf:"bytes,2,opt,name=player_out_id,json=playerOutId,proto3" json:"player_out_id,omitempty"`
	UpdateTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *TeamMemberUpdate) Reset() {
	*x = TeamMemberUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamMemberUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemberUpdate) ProtoMessage() {}

func (x *TeamMemberUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemberUpdate.ProtoReflect.Descriptor instead.
func (*TeamMemberUpdate) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{4}
}

func (x *TeamMemberUpdate) GetPlayerInId() string {
	if x != nil {
		return x.PlayerInId
	}
	return ""
}

func (x *TeamMemberUpdate) GetPlayerOutId() string {
	if x != nil {
		return x.PlayerOutId
	}
	return ""
}

func (x *TeamMemberUpdate) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type TeamScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId    string                 `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	PlayerId  string                 `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	ScoreTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=score_time,json=scoreTime,proto3" json:"score_time,omitempty"`
}

func (x *TeamScore) Reset() {
	*x = TeamScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamScore) ProtoMessage() {}

func (x *TeamScore) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamScore.ProtoReflect.Descriptor instead.
func (*TeamScore) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{5}
}

func (x *TeamScore) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *TeamScore) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *TeamScore) GetScoreTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScoreTime
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType string                 `protobuf:"bytes,1,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	PlayerId string                 `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	CardTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=card_time,json=cardTime,proto3" json:"card_time,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{6}
}

func (x *Card) GetCardType() string {
	if x != nil {
		return x.CardType
	}
	return ""
}

func (x *Card) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *Card) GetCardTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CardTime
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []string            `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Cards   []*Card             `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
	Scores  []*TeamScore        `protobuf:"bytes,3,rep,name=scores,proto3" json:"scores,omitempty"`
	Updates []*TeamMemberUpdate `protobuf:"bytes,4,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{7}
}

func (x *Team) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Team) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Team) GetScores() []*TeamScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *Team) GetUpdates() []*TeamMemberUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type TeamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Team1Id      string `protobuf:"bytes,1,opt,name=team1_id,json=team1Id,proto3" json:"team1_id,omitempty"`
	Team2Id      string `protobuf:"bytes,2,opt,name=team2_id,json=team2Id,proto3" json:"team2_id,omitempty"`
	Team1        *Team  `protobuf:"bytes,3,opt,name=team1,proto3" json:"team1,omitempty"`
	Team2        *Team  `protobuf:"bytes,4,opt,name=team2,proto3" json:"team2,omitempty"`
	OveralScore1 int32  `protobuf:"varint,5,opt,name=overal_score1,json=overalScore1,proto3" json:"overal_score1,omitempty"`
	OveralScore2 int32  `protobuf:"varint,6,opt,name=overal_score2,json=overalScore2,proto3" json:"overal_score2,omitempty"`
}

func (x *TeamEvent) Reset() {
	*x = TeamEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamEvent) ProtoMessage() {}

func (x *TeamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamEvent.ProtoReflect.Descriptor instead.
func (*TeamEvent) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{8}
}

func (x *TeamEvent) GetTeam1Id() string {
	if x != nil {
		return x.Team1Id
	}
	return ""
}

func (x *TeamEvent) GetTeam2Id() string {
	if x != nil {
		return x.Team2Id
	}
	return ""
}

func (x *TeamEvent) GetTeam1() *Team {
	if x != nil {
		return x.Team1
	}
	return nil
}

func (x *TeamEvent) GetTeam2() *Team {
	if x != nil {
		return x.Team2
	}
	return nil
}

func (x *TeamEvent) GetOveralScore1() int32 {
	if x != nil {
		return x.OveralScore1
	}
	return 0
}

func (x *TeamEvent) GetOveralScore2() int32 {
	if x != nil {
		return x.OveralScore2
	}
	return 0
}

type OveralResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	OveralScore int32  `protobuf:"varint,2,opt,name=overal_score,json=overalScore,proto3" json:"overal_score,omitempty"`
}

func (x *OveralResult) Reset() {
	*x = OveralResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OveralResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OveralResult) ProtoMessage() {}

func (x *OveralResult) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OveralResult.ProtoReflect.Descriptor instead.
func (*OveralResult) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{9}
}

func (x *OveralResult) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *OveralResult) GetOveralScore() int32 {
	if x != nil {
		return x.OveralScore
	}
	return 0
}

type Race struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players        []string          `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Scores         []*ScorePR        `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
	TechniqueLoses []*TechniqueLoseP `protobuf:"bytes,3,rep,name=technique_loses,json=techniqueLoses,proto3" json:"technique_loses,omitempty"`
	OveralResults  []*OveralResult   `protobuf:"bytes,4,rep,name=overal_results,json=overalResults,proto3" json:"overal_results,omitempty"`
}

func (x *Race) Reset() {
	*x = Race{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Race) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Race) ProtoMessage() {}

func (x *Race) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Race.ProtoReflect.Descriptor instead.
func (*Race) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{10}
}

func (x *Race) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Race) GetScores() []*ScorePR {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *Race) GetTechniqueLoses() []*TechniqueLoseP {
	if x != nil {
		return x.TechniqueLoses
	}
	return nil
}

func (x *Race) GetOveralResults() []*OveralResult {
	if x != nil {
		return x.OveralResults
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId    string      `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	PlayerOnly *PlayerOnly `protobuf:"bytes,2,opt,name=player_only,json=playerOnly,proto3" json:"player_only,omitempty"`
	TeamEvent  *TeamEvent  `protobuf:"bytes,3,opt,name=team_event,json=teamEvent,proto3" json:"team_event,omitempty"`
	RaceEvent  *Race       `protobuf:"bytes,4,opt,name=race_event,json=raceEvent,proto3" json:"race_event,omitempty"`
	Finished   bool        `protobuf:"varint,5,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{11}
}

func (x *Event) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Event) GetPlayerOnly() *PlayerOnly {
	if x != nil {
		return x.PlayerOnly
	}
	return nil
}

func (x *Event) GetTeamEvent() *TeamEvent {
	if x != nil {
		return x.TeamEvent
	}
	return nil
}

func (x *Event) GetRaceEvent() *Race {
	if x != nil {
		return x.RaceEvent
	}
	return nil
}

func (x *Event) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type CreateStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvenId    string `protobuf:"bytes,1,opt,name=even_id,json=evenId,proto3" json:"even_id,omitempty"`
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Event     *Event `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *CreateStatRequest) Reset() {
	*x = CreateStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStatRequest) ProtoMessage() {}

func (x *CreateStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStatRequest.ProtoReflect.Descriptor instead.
func (*CreateStatRequest) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{12}
}

func (x *CreateStatRequest) GetEvenId() string {
	if x != nil {
		return x.EvenId
	}
	return ""
}

func (x *CreateStatRequest) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *CreateStatRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type GetStatsByEventIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *GetStatsByEventIdRequest) Reset() {
	*x = GetStatsByEventIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stat_service_stats_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsByEventIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsByEventIdRequest) ProtoMessage() {}

func (x *GetStatsByEventIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stat_service_stats_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsByEventIdRequest.ProtoReflect.Descriptor instead.
func (*GetStatsByEventIdRequest) Descriptor() ([]byte, []int) {
	return file_stat_service_stats_proto_rawDescGZIP(), []int{13}
}

func (x *GetStatsByEventIdRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

var File_stat_service_stats_proto protoreflect.FileDescriptor

var file_stat_service_stats_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x45, 0x0a, 0x0e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4c,
	0x6f, 0x73, 0x65, 0x50, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x07, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x52, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xee, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x50, 0x52, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4c, 0x6f, 0x73, 0x65,
	0x50, 0x52, 0x0d, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4c, 0x6f, 0x73, 0x65,
	0x22, 0x95, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x65, 0x61, 0x6d, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x65, 0x61, 0x6d, 0x32, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x31, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x32,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x22, 0x4e, 0x0a, 0x0c, 0x4f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x04, 0x52,
	0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x52, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x50, 0x52, 0x0e, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0xbd, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0a, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x09, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22,
	0x69, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x32, 0xfa, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x1a, 0x0a, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x6e, 0x6c, 0x79, 0x1a, 0x0b, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x1f, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x05, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x1a, 0x05, 0x2e, 0x52, 0x61, 0x63,
	0x65, 0x12, 0x31, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x12,
	0x5a, 0x10, 0x2e, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stat_service_stats_proto_rawDescOnce sync.Once
	file_stat_service_stats_proto_rawDescData = file_stat_service_stats_proto_rawDesc
)

func file_stat_service_stats_proto_rawDescGZIP() []byte {
	file_stat_service_stats_proto_rawDescOnce.Do(func() {
		file_stat_service_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_stat_service_stats_proto_rawDescData)
	})
	return file_stat_service_stats_proto_rawDescData
}

var file_stat_service_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_stat_service_stats_proto_goTypes = []any{
	(*UpdateTeamStatsRequest)(nil),   // 0: UpdateTeamStatsRequest
	(*TechniqueLoseP)(nil),           // 1: TechniqueLoseP
	(*ScorePR)(nil),                  // 2: ScorePR
	(*PlayerOnly)(nil),               // 3: PlayerOnly
	(*TeamMemberUpdate)(nil),         // 4: TeamMemberUpdate
	(*TeamScore)(nil),                // 5: TeamScore
	(*Card)(nil),                     // 6: Card
	(*Team)(nil),                     // 7: Team
	(*TeamEvent)(nil),                // 8: TeamEvent
	(*OveralResult)(nil),             // 9: OveralResult
	(*Race)(nil),                     // 10: Race
	(*Event)(nil),                    // 11: Event
	(*CreateStatRequest)(nil),        // 12: CreateStatRequest
	(*GetStatsByEventIdRequest)(nil), // 13: GetStatsByEventIdRequest
	(*timestamppb.Timestamp)(nil),    // 14: google.protobuf.Timestamp
}
var file_stat_service_stats_proto_depIdxs = []int32{
	6,  // 0: UpdateTeamStatsRequest.card:type_name -> Card
	5,  // 1: UpdateTeamStatsRequest.score:type_name -> TeamScore
	4,  // 2: UpdateTeamStatsRequest.update:type_name -> TeamMemberUpdate
	2,  // 3: PlayerOnly.scores:type_name -> ScorePR
	1,  // 4: PlayerOnly.technique_lose:type_name -> TechniqueLoseP
	14, // 5: TeamMemberUpdate.update_time:type_name -> google.protobuf.Timestamp
	14, // 6: TeamScore.score_time:type_name -> google.protobuf.Timestamp
	14, // 7: Card.card_time:type_name -> google.protobuf.Timestamp
	6,  // 8: Team.cards:type_name -> Card
	5,  // 9: Team.scores:type_name -> TeamScore
	4,  // 10: Team.updates:type_name -> TeamMemberUpdate
	7,  // 11: TeamEvent.team1:type_name -> Team
	7,  // 12: TeamEvent.team2:type_name -> Team
	2,  // 13: Race.scores:type_name -> ScorePR
	1,  // 14: Race.technique_loses:type_name -> TechniqueLoseP
	9,  // 15: Race.overal_results:type_name -> OveralResult
	3,  // 16: Event.player_only:type_name -> PlayerOnly
	8,  // 17: Event.team_event:type_name -> TeamEvent
	10, // 18: Event.race_event:type_name -> Race
	11, // 19: CreateStatRequest.event:type_name -> Event
	8,  // 20: StatsService.CreateTeamStats:input_type -> TeamEvent
	3,  // 21: StatsService.CreatePlayerOnlyStats:input_type -> PlayerOnly
	10, // 22: StatsService.CreateRaceStats:input_type -> Race
	0,  // 23: StatsService.UpdateTeamStats:input_type -> UpdateTeamStatsRequest
	13, // 24: StatsService.GetStatsByEventId:input_type -> GetStatsByEventIdRequest
	8,  // 25: StatsService.CreateTeamStats:output_type -> TeamEvent
	3,  // 26: StatsService.CreatePlayerOnlyStats:output_type -> PlayerOnly
	10, // 27: StatsService.CreateRaceStats:output_type -> Race
	7,  // 28: StatsService.UpdateTeamStats:output_type -> Team
	11, // 29: StatsService.GetStatsByEventId:output_type -> Event
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_stat_service_stats_proto_init() }
func file_stat_service_stats_proto_init() {
	if File_stat_service_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stat_service_stats_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTeamStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TechniqueLoseP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ScorePR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerOnly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TeamMemberUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TeamScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TeamEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*OveralResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Race); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stat_service_stats_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetStatsByEventIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stat_service_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stat_service_stats_proto_goTypes,
		DependencyIndexes: file_stat_service_stats_proto_depIdxs,
		MessageInfos:      file_stat_service_stats_proto_msgTypes,
	}.Build()
	File_stat_service_stats_proto = out.File
	file_stat_service_stats_proto_rawDesc = nil
	file_stat_service_stats_proto_goTypes = nil
	file_stat_service_stats_proto_depIdxs = nil
}
